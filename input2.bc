; ModuleID = '<stdin>'
target datalayout = "e-m:w-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-w64-windows-gnu"

; Function Attrs: uwtable
define i32 @main(i32 %argc, i8** %argv) #0 {
  call void @llvm.dbg.value(metadata i32 %argc, i64 0, metadata !15, metadata !16), !dbg !17
  call void @llvm.dbg.value(metadata i8** %argv, i64 0, metadata !18, metadata !16), !dbg !19
  %1 = call noalias i8* @_Znwy(i64 4) #3, !dbg !20
  %2 = bitcast i8* %1 to i32*, !dbg !20
  store i32 0, i32* %2, align 4, !dbg !20
  call void @llvm.dbg.value(metadata i32* %2, i64 0, metadata !21, metadata !16), !dbg !23
  store i32 64, i32* %2, align 4, !dbg !24
  %3 = icmp sle i32 %argc, 2, !dbg !25
  br i1 %3, label %4, label %7, !dbg !27

; <label>:4                                       ; preds = %0
  %5 = load i32, i32* %2, align 4, !dbg !28
  %6 = add nsw i32 %5, %argc, !dbg !29
  store i32 %6, i32* %2, align 4, !dbg !30
  br label %10, !dbg !31

; <label>:7                                       ; preds = %0
  %8 = load i32, i32* %2, align 4, !dbg !32
  %9 = sub nsw i32 %8, %argc, !dbg !33
  store i32 %9, i32* %2, align 4, !dbg !34
  br label %10

; <label>:10                                      ; preds = %7, %4
  %11 = load i32, i32* %2, align 4, !dbg !35
  ret i32 %11, !dbg !36
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znwy(i64) #2

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { builtin }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!11, !12, !13}
!llvm.ident = !{!14}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 3.7.0 (tags/RELEASE_370/final)", isOptimized: false, runtimeVersion: 0, emissionKind: 1, enums: !2, subprograms: !3)
!1 = !DIFile(filename: "input2.cpp", directory: "C:\5CPrograms\5CPortableGit\5CGIT\5CFIT\5Cbordel\5Cbordel1")
!2 = !{}
!3 = !{!4}
!4 = !DISubprogram(name: "main", scope: !1, file: !1, line: 2, type: !5, isLocal: false, isDefinition: true, scopeLine: 3, flags: DIFlagPrototyped, isOptimized: false, function: i32 (i32, i8**)* @main, variables: !2)
!5 = !DISubroutineType(types: !6)
!6 = !{!7, !7, !8}
!7 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64, align: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64, align: 64)
!10 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!11 = !{i32 2, !"Dwarf Version", i32 4}
!12 = !{i32 2, !"Debug Info Version", i32 3}
!13 = !{i32 1, !"PIC Level", i32 2}
!14 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!15 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argc", arg: 1, scope: !4, file: !1, line: 2, type: !7)
!16 = !DIExpression()
!17 = !DILocation(line: 2, column: 14, scope: !4)
!18 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "argv", arg: 2, scope: !4, file: !1, line: 2, type: !8)
!19 = !DILocation(line: 2, column: 27, scope: !4)
!20 = !DILocation(line: 4, column: 22, scope: !4)
!21 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "supernumber", scope: !4, file: !1, line: 4, type: !22)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64, align: 64)
!23 = !DILocation(line: 4, column: 8, scope: !4)
!24 = !DILocation(line: 5, column: 16, scope: !4)
!25 = !DILocation(line: 6, column: 12, scope: !26)
!26 = distinct !DILexicalBlock(scope: !4, file: !1, line: 6, column: 7)
!27 = !DILocation(line: 6, column: 7, scope: !4)
!28 = !DILocation(line: 7, column: 20, scope: !26)
!29 = !DILocation(line: 7, column: 33, scope: !26)
!30 = !DILocation(line: 7, column: 18, scope: !26)
!31 = !DILocation(line: 7, column: 5, scope: !26)
!32 = !DILocation(line: 9, column: 20, scope: !26)
!33 = !DILocation(line: 9, column: 33, scope: !26)
!34 = !DILocation(line: 9, column: 18, scope: !26)
!35 = !DILocation(line: 11, column: 10, scope: !4)
!36 = !DILocation(line: 11, column: 3, scope: !4)
